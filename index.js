require('dotenv').config();

console.log('GOOGLE_SERVICE_ACCOUNT_B64 –∏–∑ .env:', process.env.GOOGLE_SERVICE_ACCOUNT_B64?.substring(0, 30) + '...');

const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');

// === –†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∫–∞ GOOGLE_SERVICE_ACCOUNT_B64 ===
let creds;
try {
  const jsonString = Buffer.from(process.env.GOOGLE_SERVICE_ACCOUNT_B64, 'base64').toString('utf8');
  creds = JSON.parse(jsonString);
  creds.private_key = creds.private_key.replace(/\\n/g, '\n');
  console.log('‚úÖ GOOGLE_SERVICE_ACCOUNT —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.');
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ GOOGLE_SERVICE_ACCOUNT:', err.message);
  process.exit(1);
}

// === Express –¥–ª—è Railway ===
const app = express();
const PORT = process.env.PORT || 3000;
app.get("/", (req, res) => res.send("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"));
app.listen(PORT, () => console.log(`Server on ${PORT}`));

// === Telegram-–±–æ—Ç ===
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

const mainMenu = {
  reply_markup: {
    keyboard: [
      ['üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', 'üì∑ –§–æ—Ç–æ –∫—É—Ö–æ–Ω—å'],
      ['üö™ –§–æ—Ç–æ —à–∫–∞—Ñ–æ–≤', 'ü§ù –ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã'],
      ['üì± Instagram', '‚ÑπÔ∏è –û –Ω–∞—Å']
    ],
    resize_keyboard: true,
  }
};

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –º–µ–±–µ–ª–∏! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', mainMenu);
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === 'üì± Instagram') {
    const url = 'https://www.instagram.com/sapermebel_grodno';
    bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à Instagram:', {
      reply_markup: {
        inline_keyboard: [[{ text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ Instagram', url }]]
      }
    });

  } else if (text === '‚ÑπÔ∏è –û –Ω–∞—Å') {
    bot.sendMessage(chatId,
      '–ú—ã ‚Äî –º–µ–±–µ–ª—å–Ω—ã–π —Å–∞–ª–æ–Ω –≤ –ì—Ä–æ–¥–Ω–æ.\n' +
      '–ò–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ö–Ω–∏, —à–∫–∞—Ñ—ã –∏ –¥—Ä—É–≥—É—é –∫–æ—Ä–ø—É—Å–Ω—É—é –º–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑.\n' +
      '–†–∞–±–æ—Ç–∞–µ–º —Å –Ω–∞–¥—ë–∂–Ω—ã–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º–∏.\n' +
      '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä. –ò –ª—É—á—à–∏–π –†—ã–∂–∏–π –ü—Ä–æ–¥–∞–≤–µ—Ü.'
    );

  } else if (text === 'ü§ù –ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã') {
    bot.sendMessage(chatId,
      '–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ñ–∞–±—Ä–∏–∫–∞–º–∏:\n' +
      'üè≠ ‚Äú–°–∞–ø–µ—Ä –º–µ–±–µ–ª—å‚Äù ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ö–Ω–∏ –∏ —à–∫–∞—Ñ—ã.\n' +
      'üè≠ ‚Äú–ó–æ–≤ –º–µ–±–µ–ª—å‚Äù ‚Äî –∫—É—Ö–Ω–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞.'
    );

  } else if (text === 'üì∑ –§–æ—Ç–æ –∫—É—Ö–æ–Ω—å') {
    const dir = path.join(__dirname, 'kitchens');
    fs.readdir(dir, async (err, files) => {
      if (err || !files.length) {
        bot.sendMessage(chatId, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫—É—Ö–æ–Ω—å –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
        return;
      }
      const images = files.filter(f => /\.(jpe?g|png)$/i.test(f));
      for (const img of images) {
        await bot.sendPhoto(chatId, path.join(dir, img));
      }
    });

  } else if (text === 'üö™ –§–æ—Ç–æ —à–∫–∞—Ñ–æ–≤') {
    const wardrobes = [
      { url: 'https://example.com/wardrobe1.jpg', caption: '–®–∫–∞—Ñ-–∫—É–ø–µ #1' },
      { url: 'https://example.com/wardrobe2.jpg', caption: '–®–∫–∞—Ñ-–∫—É–ø–µ #2' },
    ];
    for (const item of wardrobes) {
      await bot.sendPhoto(chatId, item.url, { caption: item.caption });
    }

  } else if (text === 'üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É') {
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
    bot.once('message', (msgName) => {
      const name = msgName.text;
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
      bot.once('message', (msgPhone) => {
        const phone = msgPhone.text;
        bot.sendMessage(chatId, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
        bot.once('message', async (msgComment) => {
          const comment = msgComment.text;
          try {
            await saveToGoogleSheets(name, phone, comment);
            bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.', mainMenu);
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', err);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainMenu);
          }
        });
      });
    });
  }
});

// === –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É ===
async function saveToGoogleSheets(name, phone, comment) {
  const auth = new google.auth.GoogleAuth({
    credentials: creds,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const client = await auth.getClient();
  const sheets = google.sheets({ version: 'v4', auth: client });

  const spreadsheetId = process.env.GOOGLE_SHEET_ID;

  await sheets.spreadsheets.values.append({
    spreadsheetId,
    range: '–ó–∞—è–≤–∫–∞ –º–µ–±–µ–ª–∏!A1',
    valueInputOption: 'USER_ENTERED',
    resource: {
      values: [[name, phone, comment]],
    },
  });
}